#!/ysr/bin/env node

const app = require('../server')
const debug = require('debug')('server:server')
const http = require('http')

// Get port from environment and store in Express
const port = normalizePort(process.env.NODE_ENV === 'production' ? process.env.PORT_PROD : process.env.PORT_DEV)
app.set('port', port)

// Normalize a port into a number, string, or false

function normalizePort(val) {
  const port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

// Send error messages

app.use((req, res, next) => res.status(404).json({ message: 'Not found' }))

app.use((err, req, res, next) => {
  console.error('ERROR', req.method, req.path, err)
  
  // only render if the error ocurred before sending the response
  if (!res.headersSent) res.status(500).json({ message: 'Server error' })
})

const server = http.createServer(app)

// Event listener for HTTP server 'error' event

server.on('error', error => {
  if (error.syscall !== 'listen') { throw error }

  const bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`

  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`)
      process.exit(1)
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1)
      break;
    default:
      throw error
  }
});

server.listen(port, () => {
  const addr = server.address()
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debug(`Listening on ${bind}`)

  console.log(`Server listening on port: ${addr.port}`)
})